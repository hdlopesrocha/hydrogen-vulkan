#!/bin/sh
# Copyright (c) 2015-2020 LunarG, Inc.
set -eu

usage() {
    echo "Script to build repositories that are useful for Vulkan development"
    echo ""
    echo "Usage: $0 [all] [help] [clean] [debug] [glslang] [vulkan-loader|loader]"
    echo "[vulkan-validationlayers|layers] [vulkan-tools|tools] [vulkantools|lunarg-tools]"
    echo "[shaderc] [spirv-tools|spirvtools] [spirv-cross|spirvcross]"
    echo "[gfxreconstruct] [spirv-reflect] [dxc] [vulkan-extensionlayer]"
    echo ""
    echo "Any or all options can be specified at once"
    exit
}

build_spirv_headers() {
    echo "~~~Building SPIRV-Headers Repo~~~"
    cd "${SPIRV_HEADERS_DIR}"
    [ -d "${SPIRV_HEADERS_DIR}/${BUILD_DIR}" ] || mkdir -p "${SPIRV_HEADERS_DIR}/${BUILD_DIR}"
    cd "${SPIRV_HEADERS_DIR}/${BUILD_DIR}"
    cmake -DCMAKE_BUILD_TYPE="Release" \
        -DCMAKE_INSTALL_PREFIX="$ARCHDIR" \
        "${SPIRV_HEADERS_DIR}"
    make $NUMJOBS install
    cd "${SDKDIR}"
}

build_glslang() {
    echo "~~~Building glslang Repo~~~"
    cd "$GLSL_DIR"
    [ ! -d External/spirv-tools ] && python update_glslang_sources.py
    [ -d "${GLSL_DIR}/${BUILD_DIR}" ] || mkdir -p "${GLSL_DIR}/${BUILD_DIR}"
    cd "${GLSL_DIR}/${BUILD_DIR}"
    cmake -DCMAKE_BUILD_TYPE="$BUILD_RELEASE_TYPE" \
        -DCMAKE_INSTALL_PREFIX="$ARCHDIR" \
        -DCMAKE_INSTALL_LIBDIR="$LIBDIR" \
        -DCMAKE_INSTALL_BINDIR="$BINDIR" \
        "${GLSL_DIR}"
    make $NUMJOBS install
    cd "${SDKDIR}"
}

build_headers() {
    echo "~~~Building Vulkan-Headers~~~"
    cd "$VH_DIR"
    [ -d "$VH_DIR/${BUILD_DIR}" ] || mkdir "$VH_DIR/${BUILD_DIR}"
    cd "$VH_DIR/${BUILD_DIR}"
    cmake -DCMAKE_BUILD_TYPE="$BUILD_RELEASE_TYPE" \
        -DCMAKE_INSTALL_PREFIX="$ARCHDIR" \
        -DCMAKE_INSTALL_LIBDIR="$LIBDIR" \
        "${VH_DIR}"
    make $NUMJOBS install
    cd "${SDKDIR}"
}

# Requires Vulkan-Headers
build_loader() {
    echo "~~~Building Vulkan-Loader~~~"
    cd "$VL_DIR"
    [ -d "${VL_DIR}/${BUILD_DIR}" ] || mkdir -p "${VL_DIR}/${BUILD_DIR}"
    cd "${VL_DIR}/${BUILD_DIR}"
    cmake -DCMAKE_BUILD_TYPE="$BUILD_RELDEBINFO_TYPE" \
        -DVULKAN_HEADERS_INSTALL_DIR="$ARCHDIR" \
        -DVULKAN_REGISTRY_PATH_HINT="$ARCHDIR" \
        -DCMAKE_INSTALL_PREFIX="$ARCHDIR" \
        -DCMAKE_INSTALL_LIBDIR="$LIBDIR" \
        -DCMAKE_INSTALL_BINDIR="$BINDIR" \
	-DSYSCONFDIR="/etc" \
        "${VL_DIR}"
    make $NUMJOBS install
    cd "${SDKDIR}"
}

# Requires glslang and Vulkan-Loader
build_validation_layers() {
    echo "~~~Building Vulkan-ValidationLayers~~~"
    cd "$VV_DIR"
    [ -d "${VV_DIR}/${BUILD_DIR}" ] || mkdir -p "${VV_DIR}/${BUILD_DIR}"
    cd "${VV_DIR}/${BUILD_DIR}"
    cmake -DCMAKE_BUILD_TYPE="$BUILD_RELDEBINFO_TYPE" \
        -DVULKAN_HEADERS_INSTALL_DIR="$ARCHDIR" \
        -DVULKAN_REGISTRY_PATH_HINT="$ARCHDIR" \
        -DVULKAN_LOADER_INSTALL_DIR="$ARCHDIR" \
        -DGLSLANG_INSTALL_DIR="$ARCHDIR" \
        -DSPIRV_HEADERS_INSTALL_DIR="$GLSL_DIR/External/spirv-tools/external/spirv-headers/" \
        -DCMAKE_INSTALL_DATAROOTDIR="etc" \
        -DBUILD_TESTS="OFF" \
        -DBUILD_LAYER_SUPPORT_FILES="ON" \
        -DCMAKE_INSTALL_PREFIX="$ARCHDIR" \
        -DCMAKE_INSTALL_LIBDIR="$LIBDIR" \
        -DCMAKE_INSTALL_BINDIR="$BINDIR" \
        -DANNOTATED_SPEC_LINK="\"https://vulkan.lunarg.com/doc/view/_MAGIC_VERSION_ID_.1/linux/_MAGIC_ANNOTATED_SPEC_TYPE_/vkspec.html\"" \
        -DROBIN_HOOD_HASHING_INSTALL_DIR="${VV_DIR}/external/robin-hood-hashing" \
        "${VV_DIR}"
    make $NUMJOBS install
    cd "${SDKDIR}"
}

# Requires Vulkan-Headers
build_extension_layer() {
    echo "~~~Building Vulkan-ExtensionLayer~~~"
    cd "$EXT_LAYER_DIR"
    [ -d "${EXT_LAYER_DIR}/${BUILD_DIR}" ] || mkdir -p "${EXT_LAYER_DIR}/${BUILD_DIR}"
    cd "${EXT_LAYER_DIR}/${BUILD_DIR}"
    cmake -DCMAKE_BUILD_TYPE="$BUILD_RELDEBINFO_TYPE" \
        -DVULKAN_HEADERS_INSTALL_DIR="$ARCHDIR" \
        -DVULKAN_REGISTRY_PATH_HINT="$ARCHDIR" \
        -DCMAKE_INSTALL_PREFIX="$ARCHDIR" \
        -DCMAKE_INSTALL_LIBDIR="$LIBDIR" \
        -DCMAKE_INSTALL_BINDIR="$BINDIR" \
        -DCMAKE_INSTALL_DATAROOTDIR="etc" \
        "${EXT_LAYER_DIR}"
    make $NUMJOBS install
    [ -e "${LIBDIR}/libVkLayer_khronos_timeline_semaphore.so" ] &&\
        rm -v "${LIBDIR}/libVkLayer_khronos_timeline_semaphore.so"
    [ -e "${ARCHDIR}/etc/vulkan/explicit_layer.d/VkLayer_khronos_timeline_semaphore.json" ] &&\
        rm -v "${ARCHDIR}/etc/vulkan/explicit_layer.d/VkLayer_khronos_timeline_semaphore.json"
    cd "${SDKDIR}"
}

# Requires Vulkan-Loader
build_tools() {
    build_headers
    echo "~~~Building Vulkan-Tools~~~"
    cd "$VT_DIR"
    [ -d "${VT_DIR}/${BUILD_DIR}" ] || mkdir -p "${VT_DIR}/${BUILD_DIR}"
    cd "${VT_DIR}/${BUILD_DIR}"
    cmake -DCMAKE_BUILD_TYPE="$BUILD_RELDEBINFO_TYPE" \
        -DCMAKE_INSTALL_PREFIX="$ARCHDIR" \
        -DVULKAN_LOADER_INSTALL_DIR="$ARCHDIR" \
        -DGLSLANG_INSTALL_DIR="$ARCHDIR" \
        -DVULKAN_HEADERS_INSTALL_DIR="$ARCHDIR" \
        -DCMAKE_INSTALL_LIBDIR="$LIBDIR" \
        -DCMAKE_INSTALL_BINDIR="$BINDIR" \
        "${VT_DIR}"
    make $NUMJOBS install
    cd "${SDKDIR}"
}

# Requires Vulkan-ValidationLayers
build_lunarg_tools() {
      echo "~~~Building LunarG VulkanTools~~~"
    cd "$LGVT_DIR"
    [ -d "${LGVT_DIR}/${BUILD_DIR}" ] || mkdir -p "${LGVT_DIR}/${BUILD_DIR}"
    cd "${LGVT_DIR}/${BUILD_DIR}"
    cmake -DCMAKE_BUILD_TYPE="$BUILD_RELDEBINFO_TYPE" \
        -DVULKAN_LOADER_INSTALL_DIR="$ARCHDIR" \
        -DVULKAN_HEADERS_INSTALL_DIR="$ARCHDIR" \
        -DVULKAN_REGISTRY_PATH_HINT="$ARCHDIR" \
        -DVULKAN_VALIDATIONLAYERS_INSTALL_DIR="$ARCHDIR" \
        -DBUILD_TESTS="OFF" \
        -DBUILD_VKTRACEVIEWER="OFF" \
        -DCMAKE_INSTALL_PREFIX="$ARCHDIR" \
        -DCMAKE_INSTALL_LIBDIR="$LIBDIR" \
        -DCMAKE_INSTALL_BINDIR="$BINDIR" \
	-DINSTALL_GTEST="OFF" \
        "${LGVT_DIR}"
    make $NUMJOBS install
    install -d "$SHAREDIR/vulkan/config/VK_LAYER_LUNARG_device_simulation/"
    install -vm644 "${LGVT_DIR}"/layersvt/device_simulation_examples/sdk_sample_configs/*.json "$SHAREDIR/vulkan/config/VK_LAYER_LUNARG_device_simulation/"
    cd "${SDKDIR}"
}

build_shaderc() {
    echo "~~~Building shaderc~~~"
    cd "${SHADERC_DIR}"
    python update_shaderc_sources.py
    cd src
    [ -d "${SHADERC_DIR}/src/${BUILD_DIR}" ] || mkdir "${SHADERC_DIR}/src/${BUILD_DIR}"
    cd "${SHADERC_DIR}/src/${BUILD_DIR}"
    cmake -G"Unix Makefiles" \
        -DCMAKE_BUILD_TYPE="$BUILD_RELEASE_TYPE" \
        -DSHADERC_SKIP_INSTALL="OFF" \
        -DSHADERC_SKIP_TESTS="ON" \
        -DSKIP_SPIRV_TOOLS_INSTALL="ON" \
        -DSKIP_GLSLANG_INSTALL="ON" \
        -DCMAKE_INSTALL_PREFIX="$ARCHDIR" \
        -DCMAKE_INSTALL_LIBDIR="$LIBDIR" \
        -DCMAKE_INSTALL_BINDIR="$BINDIR" \
        "${SHADERC_DIR}/src/"
    make $NUMJOBS install
    install -vm644 "${SHADERC_DIR}/src/${BUILD_DIR}/libshaderc_util/libshaderc_util.a" "$LIBDIR"
    cd "${SDKDIR}"
}

build_spirv_cross() {
    echo "~~~Building SPIRV-Cross~~~"
    cd "${SPIRV_CROSS_DIR}"
    [ -d "${SPIRV_CROSS_DIR}/${BUILD_DIR}" ] || mkdir "${SPIRV_CROSS_DIR}/${BUILD_DIR}"
    cd "${SPIRV_CROSS_DIR}/${BUILD_DIR}"
    cmake -DCMAKE_BUILD_TYPE="$BUILD_RELEASE_TYPE" \
        -DCMAKE_INSTALL_PREFIX="$ARCHDIR" \
        -DCMAKE_INSTALL_BINDIR="$BINDIR" \
        -DCMAKE_INSTALL_LIBDIR="$LIBDIR" \
        -DSPIRV_CROSS_ENABLE_TESTS="OFF" \
        -DSPIRV_CROSS_SHARED="ON" \
        -DSPIRV_CROSS_FORCE_PIC="ON" \
        "${SPIRV_CROSS_DIR}"
    make $NUMJOBS install
    cd "${SDKDIR}"
}

build_gfxreconstruct() {
    echo "~~~Building GFXreconstruct~~~"
    cd "$GFXRECONSTRUCT_DIR"
    [ -d "${GFXRECONSTRUCT_DIR}/${BUILD_DIR}" ] || mkdir "${GFXRECONSTRUCT_DIR}/${BUILD_DIR}"
    cd "${GFXRECONSTRUCT_DIR}/${BUILD_DIR}"
    cmake -DCMAKE_BUILD_TYPE="$BUILD_RELDEBINFO_TYPE" \
        -DCMAKE_INSTALL_PREFIX="$ARCHDIR" \
        -DCMAKE_INSTALL_DATAROOTDIR="etc" \
        -DCMAKE_INSTALL_LIBDIR="$LIBDIR" \
        -DCMAKE_INSTALL_BINDIR="$BINDIR" \
        "${GFXRECONSTRUCT_DIR}"
    make $NUMJOBS install
    cd "${SDKDIR}"
}

build_dxc() {
    echo "~~~Building DXC~~~"
    cd "$DXC_DIR"
    [ -d "${DXC_DIR}/${BUILD_DIR}" ] || mkdir "${DXC_DIR}/${BUILD_DIR}"
    cd "${DXC_DIR}/${BUILD_DIR}"
    cmake -DCMAKE_BUILD_TYPE="$BUILD_RELEASE_TYPE" \
        -DCMAKE_INSTALL_PREFIX="$ARCHDIR" \
        -DCMAKE_INSTALL_BINDIR="$BINDIR" \
        -DCMAKE_INSTALL_LIBDIR="$LIBDIR" \
        $(cat ${DXC_DIR}/utils/cmake-predefined-config-params) \
        -DHLSL_INCLUDE_TESTS="OFF" \
        "${DXC_DIR}"
    make $NUMJOBS install
    install -vd "${INCLUDEDIR}/dxc/"
    install -v "${DXC_DIR}/include/dxc/dxcapi.h" "${INCLUDEDIR}/dxc/"
    install -vd "${INCLUDEDIR}/dxc/Support"
    install -v "${DXC_DIR}/include/dxc/Support/WinAdapter.h" "${INCLUDEDIR}/dxc/Support"
    cd "${SDKDIR}"
}

build_spirv_reflect() {
    echo "~~~Building SPIRV-Reflect~~~"
    cd "${SPIRV_REFLECT_DIR}"
    [ -d "${SPIRV_REFLECT_DIR}/${BUILD_DIR}" ] || mkdir "${SPIRV_REFLECT_DIR}/${BUILD_DIR}"
    cd "${SPIRV_REFLECT_DIR}/${BUILD_DIR}"
    cmake -DCMAKE_BUILD_TYPE="$BUILD_RELEASE_TYPE" \
        -DCMAKE_INSTALL_PREFIX="$ARCHDIR" \
        -DCMAKE_INSTALL_BINDIR="$BINDIR" \
        -DCMAKE_INSTALL_LIBDIR="$LIBDIR" \
	-DSPIRV_REFLECT_BUILD_TESTS="OFF" \
        "${SPIRV_REFLECT_DIR}"
    make $NUMJOBS install
    install -vd "${INCLUDEDIR}/SPIRV-Reflect/"
    install -v "${SPIRV_REFLECT_DIR}/spirv_reflect.c" "${INCLUDEDIR}/SPIRV-Reflect/"
    install -v "${SPIRV_REFLECT_DIR}/spirv_reflect.h" "${INCLUDEDIR}/SPIRV-Reflect/"
    install -vd "${INCLUDEDIR}/SPIRV-Reflect/include/spirv/unified1/"
    install -v "${SPIRV_REFLECT_DIR}/include/spirv/unified1/spirv.h" "${INCLUDEDIR}/SPIRV-Reflect/include/spirv/unified1/"
    cd "$SDKDIR"
}

clean_builds() {
    [ -d "${SPIRV_HEADERS_DIR:?}/${BUILD_DIR:?}" ] && rm -r "${SPIRV_HEADERS_DIR}/${BUILD_DIR}" 2>/dev/null
    [ -d "${GLSL_DIR:?}/${BUILD_DIR:?}" ] && rm -r "${GLSL_DIR}/${BUILD_DIR}" 2>/dev/null
    [ -d "${VH_DIR:?}/${BUILD_DIR:?}" ] && rm -r "${VH_DIR}/${BUILD_DIR}" 2>/dev/null
    [ -d "${VL_DIR:?}/${BUILD_DIR:?}" ] && rm -r "${VL_DIR}/${BUILD_DIR}" 2>/dev/null
    [ -d "${VV_DIR:?}/${BUILD_DIR:?}" ] && rm -r "${VV_DIR}/${BUILD_DIR}" 2>/dev/null
    [ -d "${VT_DIR:?}/${BUILD_DIR:?}" ] && rm -r "${VT_DIR}/${BUILD_DIR}" 2>/dev/null
    [ -d "${LGVT_DIR:?}/${BUILD_DIR:?}" ] && rm -r "${LGVT_DIR}/${BUILD_DIR}" 2>/dev/null
    [ -d "${SHADERC_DIR:?}/src/${BUILD_DIR:?}" ] && rm -r "${SHADERC_DIR}/src/${BUILD_DIR}" 2>/dev/null
    [ -d "${SPIRV_CROSS_DIR:?}/${BUILD_DIR:?}" ] && rm -r "${SPIRV_CROSS_DIR}/${BUILD_DIR}" 2>/dev/null
    [ -d "${GFXRECONSTRUCT_DIR:?}/${BUILD_DIR:?}" ] && rm -r "${GFXRECONSTRUCT_DIR}/${BUILD_DIR}" 2>/dev/null
    [ -d "${DXC_DIR:?}/${BUILD_DIR:?}" ] && rm -r "${DXC_DIR}/${BUILD_DIR}" 2>/dev/null
    [ -d "${SPIRV_REFLECT_DIR:?}/${BUILD_DIR:?}" ] && rm -r "${SPIRV_REFLECT_DIR}/${BUILD_DIR}" 2>/dev/null
    [ -d "${EXT_LAYER_DIR:?}/${BUILD_DIR:?}" ] && rm -r "${EXT_LAYER_DIR}/${BUILD_DIR}" 2>/dev/null
    echo "All Build Directories Removed"
}

build_all() {
    build_spirv_headers
    build_glslang
    build_headers
    build_loader
    build_tools
    build_validation_layers
    build_lunarg_tools
    build_shaderc
    build_spirv_cross
    build_gfxreconstruct
    build_dxc
    build_spirv_reflect
    build_extension_layer
}

SDKDIR="$( dirname "$( readlink -f "${BASH_SOURCE:-$0}" )" )"
if [ -z "${SDKDIR}" ] || [ ! -n "${SDKDIR}" ] || [ ! -d "${SDKDIR}" ]; then
    echo "The SDK directory is invalid"
    exit 1
fi
ARCHDIR="${SDKDIR}"/x86_64
BINDIR="$ARCHDIR"/bin
SHAREDIR="$ARCHDIR"/share
LIBDIR="$ARCHDIR"/lib
INCLUDEDIR="$ARCHDIR"/include
SOURCEDIR="${SDKDIR}"/source

SPIRV_HEADERS_DIR="$SOURCEDIR"/SPIRV-Headers
GLSL_DIR="$SOURCEDIR"/glslang
VH_DIR="$SOURCEDIR"/Vulkan-Headers
VL_DIR="$SOURCEDIR"/Vulkan-Loader
VV_DIR="$SOURCEDIR"/Vulkan-ValidationLayers
VT_DIR="$SOURCEDIR"/Vulkan-Tools
LGVT_DIR="$SOURCEDIR"/VulkanTools
SHADERC_DIR="$SOURCEDIR"/shaderc
SPIRV_CROSS_DIR="$SOURCEDIR"/SPIRV-Cross
GFXRECONSTRUCT_DIR="$SOURCEDIR"/gfxreconstruct
DXC_DIR="$SOURCEDIR"/DirectXShaderCompiler
SPIRV_REFLECT_DIR="$SOURCEDIR"/SPIRV-Reflect
EXT_LAYER_DIR="$SOURCEDIR"/Vulkan-ExtensionLayer

NUMJOBS=""
if [ -z ${MAKEFLAGS+xyz} ]; then
    if [ -x "$(command -v nproc)" ]; then
        NUMJOBS=-j`nproc`
    fi
fi

BUILD_DIR="build"
BUILD_RELDEBINFO_TYPE="RelWithDebInfo"
BUILD_RELEASE_TYPE="Release"
BUILD_DEBUG_TYPE="Debug"

if [ $# -eq 0 ]; then
    build_all
fi

BUILD_HEADERS=0
BUILD_LOADER=0
BUILD_VALIDATION_LAYERS=0
BUILD_EXTENSION_LAYERS=0
BUILD_TOOLS=0
BUILD_LUNARG_TOOLS=0
BUILD_SHADERC=0
BUILD_SPIRV_HEADERS=0
BUILD_GLSLANG=0
BUILD_SPIRV_CROSS=0
BUILD_GFXRECONSTRUCT=0
BUILD_DXC=0
BUILD_SPIRV_REFLECT=0
while test $# -gt 0; do
    case "$1" in
        help|--help|-h)
            usage
            ;;
        all)
            build_all
            ;;
        clean)
            clean_builds
            ;;
        debug)
            BUILD_RELDEBINFO_TYPE="Debug"
            BUILD_RELEASE_TYPE="Debug"
            BUILD_DEBUG_TYPE="Debug"
            ;;
        [Vv]ulkan-[Hh]eaders|headers)
            BUILD_HEADERS=1
            ;;
        [Vv]ulkan-[Ll]oader|loader)
            BUILD_HEADERS=1
            BUILD_LOADER=1
            ;;
        [Vv]ulkan-[Vv]alidation[Ll]ayers|layers)
            BUILD_GLSLANG=1
            BUILD_HEADERS=1
            BUILD_VALIDATION_LAYERS=1
            ;;
        [Vv]ulkan-[Ee]xtension[Ll]ayer)
            BUILD_HEADERS=1
            BUILD_EXTENSION_LAYERS=1
            ;;
        [Vv]ulkan-[Tt]ools|[Kk]hronos-[Tt]ools|tools)
            BUILD_HEADERS=1
            BUILD_LOADER=1
            BUILD_TOOLS=1
            ;;
        [Vv]ulkan[Tt]ools|lunarg-tools)
            BUILD_GLSLANG=1
            BUILD_HEADERS=1
            BUILD_LOADER=1
            BUILD_VALIDATION_LAYERS=1
            BUILD_LUNARG_TOOLS=1
            ;;
        shaderc)
            BUILD_SHADERC=1
            ;;
        [Ss]pirv-[Hh]eaders)
            BUILD_SPIRV_HEADERS=1
            ;;
        glslang)
            BUILD_GLSLANG=1
            ;;
        SPIRV-Tools|spirv-tools|spirvtools)
            BUILD_GLSLANG=1
            ;;
        SPIRV-Cross|spirv-cross|spirvcross)
            BUILD_SPIRV_CROSS=1
            ;;
        gfxreconstruct|gfxrecon)
            BUILD_GFXRECONSTRUCT=1
            ;;
        DirectXShaderCompiler|DXC|dxc)
            BUILD_DXC=1
            ;;
        SPIRV-Reflect|spirv-reflect|spirvreflect)
            BUILD_SPIRV_REFLECT=1
            ;;
        *)
            echo "error: unknown option" && usage
            ;;
    esac
    shift
done

if [ $BUILD_SPIRV_HEADERS -eq 1 ]; then
    build_spirv_headers
fi
if [ $BUILD_GLSLANG -eq 1 ]; then
    build_glslang
fi
if [ $BUILD_HEADERS -eq 1 ]; then
    build_headers
fi
if [ $BUILD_LOADER -eq 1 ]; then
    build_loader
fi
if [ $BUILD_VALIDATION_LAYERS -eq 1 ]; then
    build_validation_layers
fi
if [ $BUILD_EXTENSION_LAYERS -eq 1 ]; then
    build_extension_layer
fi
if [ $BUILD_TOOLS -eq 1 ]; then
    build_tools
fi
if [ $BUILD_LUNARG_TOOLS -eq 1 ]; then
    build_lunarg_tools
fi
if [ $BUILD_SHADERC -eq 1 ]; then
    build_shaderc
fi
if [ $BUILD_SPIRV_CROSS -eq 1 ]; then
    build_spirv_cross
fi
if [ $BUILD_GFXRECONSTRUCT -eq 1 ]; then
    build_gfxreconstruct
fi
if [ $BUILD_DXC -eq 1 ]; then
    build_dxc
fi
if [ $BUILD_SPIRV_REFLECT -eq 1 ]; then
    build_spirv_reflect
fi
